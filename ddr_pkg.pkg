`ifndef DEFS_DONE
  `define DEFS_DONE

package ddr_pkg; 

  typedef enum logic[2:0] { CTRL_IDLE, CTRL_INIT, CTRL_REFRESH, CTRL_UPDATE,  CTRL_ACTIVATE, CTRL_RW, CTRL_WAIT} 
ctrl_fsm_type; 

 typedef enum logic[2:0] { ACTIVATE_IS_IDLE,  ACTIVATE_COMMAND , ACTIVATE_WAIT_STATE ,  ACTIVATE_CAS,  PRECHARGE_WAIT_DATA ,   PRECHARGE_WAIT_STATE , PRECHARGE_COMMAND ,  AFTER_PRECHARGE_CMD_DELAY} act_fsm_type; 

  typedef enum logic [3:0] {MRS, REF, PRE, PREA, ACT, WR, WRA, RD, RDA, NOP, DES, ZQCL } command_name; 
  
  typedef enum logic[1:0] {RW_IDLE, RW_WAIT_STATE, RW_DATA} rw_fsm_type;
                  
  typedef enum logic[2:0]{CAS_IDLE, CAS_WAIT_ACT, CAS_EXTRA_WAIT, CAS_CMD, CAS_WAIT_CAS, CAS_WAIT_DATA} cas_fsm_type;

  
  parameter MRS_WIDTH= 19 ; 
  parameter nCK = 1.25;
  parameter HALF_PERIOD = 1.25/2;
  parameter QUAD_PERIOD = 1.25/4;
  parameter ADDR_WIDTH = 40; 
  parameter tIS=10 ; 
  parameter tZQ=1024; 
  parameter tCKE= 400000; 
  parameter tXPR=5; 
  parameter tMRD=8;
  parameter tMOD=24;
  parameter tWTR=int'(7.5/nCK);
  parameter tREFI = int'(7800/nCK);
  parameter tRC = int'(47.5/nCK); 
  parameter tRFC = int'(160/nCK); 
  parameter tRCD = int'(12.50/nCK); 
  parameter tRRD = int'(7.5/nCK);
  parameter tRP = int'(12.5/nCK);
  parameter tRTP = int'(7.5/nCK);
  parameter tWR = int'(15/nCK);
  parameter tRAS = int'(25/nCK);
 
  parameter BG_WIDTH = 2; 
  parameter BA_WIDTH = 2; 
  parameter RA_WIDTH = 14;
  parameter CA_WIDTH = 10;
  parameter DATA_WIDTH = 8; 

  
  typedef logic[ADDR_WIDTH-1:0] host_address;
  typedef logic [MRS_WIDTH -1:0] mode_register_type;
  typedef logic[8*DATA_WIDTH-1:0] write_data; 
  typedef logic[BG_WIDTH + BA_WIDTH + RA_WIDTH + CA_WIDTH] dimm_addr; 


  typedef struct packed { 
    logic [BG_WIDTH -1:0] bg_addr;
    logic [BG_WIDTH -1:0] ba_addr;
    logic [RA_WIDTH -1:0] row_addr;
    logic [CA_WIDTH -1:0] col_addr;
   } mem_addr_type;

	parameter NOP_R = 3'b000; 
    parameter RD_R = 3'b001; 
    parameter RDA_R = 3'b010; 
    parameter WR_R = 3'b011; 
    parameter WRA_R = 3'b100; 
	
  /* 
  each request is associated with its address 
  */
  
  typedef struct packed { 
    mem_addr_type phy_addr; 
    logic[2:0] request; //000: NOP; 001: RD; 010:RDA; 011:WR; 100:WRA
  } rw_request; 

	typedef struct packed { 
      command_name cmd; 
      rw_request req; 
    } command_type; 
    

    	
     typedef struct packed { 
      write_data wr_data; 
      int burst_length; 
      int preamable; 
     } wr_data_type; 

  
endpackage 

import ddr_pkg::*;                       
`endif
    

